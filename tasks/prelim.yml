---

# Preliminary tasks that should always be run
# List users in order to look files inside each home directory
- name: Parse etc password
  ansible.builtin.import_tasks:
      file: parse_etc_password.yml
  tags:
      - always

- name: "PRELIM | List users accounts"
  ansible.builtin.command: "awk -F: '{print $1}' /etc/passwd"
  changed_when: false
  check_mode: false
  register: users

- name: "PRELIM | Gather accounts with empty password fields"
  ansible.builtin.shell: "cat /etc/shadow | awk -F: '($2 == \"\" ) {j++;print $1; } END {exit j}'"
  changed_when: false
  check_mode: false
  register: empty_password_accounts

- name: "PRELIM | Gather UID 0 accounts other than root"
  ansible.builtin.shell: "cat /etc/passwd | awk -F: '($3 == 0 && $1 != \"root\") {i++;print $1 } END {exit i}'"
  changed_when: false
  check_mode: false
  register: amazon2cis_uid_zero_accounts_except_root

- name: "PRELIM | Gather interactive user ID min and max"
  when:
      - amazon2cis_uid_info_dynamic
  tags:
      - always
  block:
      - name: "PRELIM | Gather interactive user ID min"
        ansible.builtin.shell: grep ^UID_MIN /etc/login.defs | awk '{print $2}'
        changed_when: false
        failed_when: false
        register: amazon2cis_min_uid

      - name: "PRELIM | Gather interactive user ID max"
        ansible.builtin.shell: grep ^UID_MAX /etc/login.defs | awk '{print $2}'
        changed_when: false
        failed_when: false
        register: amazon2cis_max_uid

      - name: "PRELIM | Setting the fact"
        ansible.builtin.set_fact:
            amazon2cis_uid_min: "{{ amazon2cis_min_uid.stdout | string }}"
            amazon2cis_uid_max: "{{ amazon2cis_max_uid.stdout | string }}"

- name: "PRELIM | Check whether machine is UEFI-based"
  ansible.builtin.stat:
      path: /sys/firmware/efi
  register: amazon2cis_efi_boot

- name: set bootloader type
  block:

      - name: "PRELIM | set fact if UEFI boot | Amazon Linux 2 "
        ansible.builtin.set_fact:
            amazon2cis_bootloader_file: /boot/efi/EFI/amzn/grub.cfg
            amazon2cis_legacy_boot: false
        when:
            - amazon2cis_efi_boot.stat.exists
            - ansible_distribution == 'Amazon'

      - name: "PRELIM | set if not UEFI boot"
        ansible.builtin.set_fact:
            amazon2cis_bootloader_file: /boot/grub2/grub.cfg
            amazon2cis_legacy_boot: true
        when: not amazon2cis_efi_boot.stat.exists

      - name: output bootloader and efi state
        ansible.builtin.debug:
            msg:
                - "bootloader file set to {{ amazon2cis_bootloader_file }}"
                - "legacy boot equals {{ amazon2cis_legacy_boot }}"

- name: "PRELIM | Section 1.1 | Create list of mount points"
  ansible.builtin.set_fact:
      mount_names: "{{ ansible_mounts | map(attribute='mount') | list }}"

- name: "PRELIM | Section 1.5 | SELinux"
  block:
      - name: "PRELIM | Section 1.5 | Ensure SELinux is installed"
        ansible.builtin.package:
            name:
                - libselinux
                - policycoreutils-python
            state: present

      - name: "PRELIM | Section 1.5 | Check current firewalld_t semanage state"
        ansible.builtin.shell: semanage permissive -l | grep firewalld_t
        changed_when: false
        failed_when: false
        register: firewalld_t_sestate

      - name: "PRELIM | Section 1.5 | Ensure firewalld_t is set to permissive"
        when: "'firewalld_t' not in firewalld_t_sestate.stdout"
        ansible.builtin.shell: semanage permissive -a firewalld_t
  when:
      - not amazon2cis_selinux_disable
  vars:
      ansible_python_interpreter: /bin/python

- name: "PRELIM | Find all sudoers files."
  when:
      - amazon2cis_rule_4_3_4 or
        amazon2cis_rule_4_3_5
  tags:
      - always
  ansible.builtin.shell: "find /etc/sudoers /etc/sudoers.d/ -type f ! -name '*~' ! -name '*.*'"
  changed_when: false
  failed_when: false
  check_mode: false
  register: amazon2cis_sudoers_files

- name: "PRELIM | Section 5.2.x | Configure System Accounting (auditd)"
  ansible.builtin.package:
      name: audit
      state: present
  vars:
      ansible_python_interpreter: /bin/python

- name: "PRELIM | Section 4.1.1.x | Configure cron"
  ansible.builtin.package:
      name: cronie
      state: present
  vars:
      ansible_python_interpreter: /bin/python
